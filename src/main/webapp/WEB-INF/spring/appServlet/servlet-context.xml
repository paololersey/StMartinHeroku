<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
		 

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven conversion-service="conversionService"
		enableMatrixVariables="true">
		<argument-resolvers>
			<beans:bean
				class="org.springframework.samples.mvc.data.custom.CustomArgumentResolver" />
		</argument-resolvers>
	</annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources/ directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/resources" />
		<beans:property name="suffix" value="loginPage.html" />
	</beans:bean>


	<beans:bean id="personDao"
		class="org.springframework.samples.hibernate.PersonDaoImpl">
		<beans:constructor-arg ref="sessionFactory"/>		
	</beans:bean>
	<beans:bean id="activityDao"
		class="org.springframework.samples.hibernate.ActivityDaoImpl">
		<beans:constructor-arg ref="sessionFactory"/>
	</beans:bean>
	<beans:bean id="natureOfCasePersonDao"
		class="org.springframework.samples.hibernate.NatureOfCasePersonDaoImpl">
		<beans:constructor-arg ref="sessionFactory"/>	
	</beans:bean>
	<beans:bean id="paymentDao"
		class="org.springframework.samples.hibernate.PaymentDaoImpl">
		<beans:constructor-arg ref="sessionFactory"/>	
	</beans:bean>



	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver"></beans:property>
		<beans:property name="url"
			value="jdbc:mysql://localhost:3306/STMARTINDB"></beans:property>
		<beans:property name="username" value="root"></beans:property>
		<beans:property name="password" value="password"></beans:property>
	</beans:bean>

	<!-- xml configuration settings end --><!-- xml configuration settings end -->
<beans:bean id="transactionManager"
 class="org.springframework.orm.hibernate4.HibernateTransactionManager">
<beans:property name="sessionFactory" ref="sessionFactory"></beans:property>
</beans:bean>

 <tx:annotation-driven transaction-manager="transactionManager"/> 

	<beans:bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource">
		<beans:property name="annotatedClasses">
			<beans:list>
				
				<beans:value>org.springframework.samples.hibernate.beans.Person
				</beans:value>			
				<beans:value>org.springframework.samples.hibernate.beans.ProjectPerson
				</beans:value>			
				<beans:value>org.springframework.samples.hibernate.beans.Activity
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.PersonActivity
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.ReferralType
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Zone
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Parish
				</beans:value>
				
				<beans:value>org.springframework.samples.hibernate.beans.PersonState
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Note
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.NatureOfCasePerson
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Sibling
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.SupportGroup
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Login
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.Payment
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.NatureOfPayment
				</beans:value>
				<beans:value>org.springframework.samples.hibernate.beans.DelayedMilestone
				</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:value>
				hibernate.format_sql=true
				hibernate.show_sql=true
				hibernate.dialect=org.hibernate.dialect.MySQLDialect
			</beans:value>
		</beans:property>
	</beans:bean>



	<!-- Only needed because we install custom converters to support the examples 
		in the org.springframewok.samples.mvc.convert package -->
	<beans:bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<beans:property name="formatters">
			<beans:bean
				class="org.springframework.samples.mvc.convert.MaskFormatAnnotationFormatterFactory" />
		</beans:property>
	</beans:bean>

	<!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload 
		package -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- Imports user-defined @Controller beans that process client requests -->
	<beans:import resource="controllers.xml" />

	<task:annotation-driven />

</beans:beans>